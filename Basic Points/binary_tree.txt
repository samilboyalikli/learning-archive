


PROBLEM:

Elimizde bir veri grubu var. Bunlar bazı değerler taşıyorlar. Bu değerler; 1, 3, 10, 9, 8, 6, 14.
Bu veri gruplarındaki en yüksek değeri ve en düşük değeri taşıyan verileri bulacağız.




[(1), (3), (10), (9), (8), (6), (14)]





























-> Binary Tree'nin temel özellikleri:
	1. Root -> Ağacın en üstündeki node.
	2. Leaf Nodes -> Childı olmayan nodelar.
	3. Depth -> Roottan bir düğüme kadar olan kenar sayısı.
	4. Height -> Treenin en derin leaf node'una kadar olan maksimum derinlik.

-> Binary Tree'deki veri taşıyan tüm nodelar 3 temel bileşenden oluşmaktadır.
	1. Value -> Düğümün taşıdığı veri.
	2. Left Child -> Düğümün sol alt düğümüne bir bağlantı (olmaması halinde NULL)
	3. Right Child -> Düğümün sağ alt düğümüne bir bağlantı (olmaması halinde NULL)






















	
-> Binary Tree'nin türleri:
	1. Binary Search Tree
	2. Complete Binary Tree
	3. Full Binary Tree
	4. Perfect Binary Tree
	5. Degenerate Tree

-> Veri Yapılarında Verimlilik Ölçütü:
	-> Big-O Notasyonu bir algoritmanın karmaşıklık derecesini ölçer.
	-> Big-O Notasyonunda veri büyüklüğü "n" ile temsil edilir.
	-> n = veri büyüklüğü
	-> O(1) - Sabit Zaman - veri büyüklüğünden bağımsız olan karmaşıklık.
	-> O(log n) - Logaritmik Zaman - veri büyüklüğü arttıkça çalışma süresi yavaşça artar.
	-> O(n^2) - Kare Zaman - veri büyüklüğü arttıkça çalışma süresi karesel olarak artar.
	-> O(2^n) - Üstel Zaman - veri arttıkça karmaşıklı çok hızlı bir şekilde büyür.







---------------------------------------------------------------------------------------------------------------------------------------

			    ARRAY
	+-----------+--------------------+----------------------+
	| Process   |  Avr Situation  	 |  Bad Situation	|
	|-----------+--------------------+----------------------+
	| Search    |  	    O(n)         |  	O(n)	    	|
	| Add 	    |  	    O(1)-sona-   |  	O(n)-araya-	|
	| Delete    |       O(n)         |  	O(n)		|
	+-------------------------------------------------------+


---------------------------------------------------------------------------------------------------------------------------------------

			    LINKED LIST
	-----------------------------------------------------------------
	| Process   |  Avr Situation        |  	Bad Situation		|
	|----------------------------------------------------------------
	| Search    |  O(n)     	    |  	O(n)			|
	| Add 	    |  O(1)-başa/sona-      |  	O(n)-belirli konuma-	|
	| Delete    |  O(1)-baştan/sondan-  |  	O(n)-aradan-		|
	-----------------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------------------

			    STACK
	---------------------------------------------------------
	| Process   |     Avr Situation   |  	Bad Situation	|
	|--------------------------------------------------------
	| Push      |  	    O(1)     	  |  	O(1)		|
	| Pop 	    |  	    O(1)    	  |  	O(1)		|
	| Peek      |       O(1)	  |  	O(1)		|
	---------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------------------

 			    QUEUE
	---------------------------------------------------------
	| Process   |     Avr Situation   |  	Bad Situation	|
	|--------------------------------------------------------
	| Enqueue   |  	    O(1)     	  |  	O(1)		|
	| Dequeue   |  	    O(1)    	  |  	O(1)		|
	| Peek      |       O(1)	  |  	O(1)		|
	---------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------------------

 			    HASH
	---------------------------------------------------------
	| Process   |     Avr Situation   |  	Bad Situation	|
	|--------------------------------------------------------
	| Search    |  	    O(1)     	  |  	O(n)		|
	| Insert    |  	    O(1)    	  |  	O(n)		|
	| Delete    |       O(1)	  |  	O(n)		|
	---------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------------------

 			    BST
	---------------------------------------------------------
	| Process   |     Avr Situation   |  	Bad Situation	|
	|--------------------------------------------------------
	| Search    |  	    O(log n)      |  	O(n)		|
	| Insert    |  	    O(log n)      |  	O(n)		|
	| Delete    |       O(log n)	  |  	O(n)		|
	---------------------------------------------------------



---------------------------------------------------------------------------------------------------------------------------------------

 			    AVL
	---------------------------------------------------------
	| Process   |     Avr Situation   |  	Bad Situation	|
	|--------------------------------------------------------
	| Search    |  	    O(log n)      |  	O(log n)	|
	| Insert    |  	    O(log n)      |  	O(log n)	|
	| Delete    |       O(log n)	  |  	O(log n)	|
	---------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------------------


-> ama bu verim Degenerate Tree'de O(n)'e düşer.
O(log n)


+-----------------+
|      bst	  |
+-----------------+
|    10		  |
|      \	  |
|       20	  |
|         \ 	  |
|          30	  |
+-----------------+

+-----------------+
|       avl	  |
+-----------------+
|		  |
|       20	  |
|      /  \	  |
|     10   30	  |
|		  |
+-----------------+









